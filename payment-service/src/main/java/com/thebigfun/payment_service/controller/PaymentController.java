package com.thebigfun.payment_service.controller;import com.thebigfun.payment_service.model.Payment;import com.thebigfun.payment_service.service.Impl.PaymentServiceImpl;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/payments_services")public class PaymentController {    private final PaymentServiceImpl paymentServiceImpl;    public PaymentController(PaymentServiceImpl paymentServiceImpl){        this.paymentServiceImpl = paymentServiceImpl;    }    @PostMapping    public ResponseEntity<Payment> createPayment(@RequestBody Payment payment){        Payment createdPayment = paymentServiceImpl.createPayment( payment);        return new ResponseEntity<>(createdPayment, HttpStatus.CREATED);    }    @GetMapping    public ResponseEntity<List<Payment>>getAllPayments(){        List<Payment> paymentList = paymentServiceImpl.getAllPayments();        return new ResponseEntity<>(paymentList, HttpStatus.OK);    }    @GetMapping("/{id}")    public ResponseEntity<Payment> getEventById(@PathVariable Long id) {        try {            Payment payment = paymentServiceImpl.getPaymentById(id);            return ResponseEntity.ok(payment);        } catch (RuntimeException ex){            return ResponseEntity.notFound().build();        }    }    @PutMapping("/{id}")    public ResponseEntity<Payment> updatePayment(@PathVariable Long id, @RequestBody Payment payment) {        try {            Payment updatedpayment = paymentServiceImpl.updatePayment(id, payment);            return new ResponseEntity<>(updatedpayment, HttpStatus.OK);        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }    // Eliminar un ticket    @DeleteMapping("/{id}")    public ResponseEntity<Void> deletePayment(@PathVariable Long id) {        paymentServiceImpl.deletePayment(id);        return  ResponseEntity.ok().build();    }    @GetMapping("/exists/{paymentId}")    public ResponseEntity<Boolean> existsPaymentByPaymentId(@PathVariable Long paymentId) {        boolean exists = paymentServiceImpl.existsPaymentByPaymentId(paymentId);        return ResponseEntity.ok(exists);    }}