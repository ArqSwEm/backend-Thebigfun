package com.thebigfun.payment_service.service.Impl;import com.stripe.Stripe;import com.stripe.exception.StripeException;import com.stripe.model.Charge;import com.stripe.param.ChargeCreateParams;import com.thebigfun.payment_service.dtos.PaymentRequest;import com.thebigfun.payment_service.service.PaymentGatewayService;import jakarta.annotation.PostConstruct;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import reactor.core.publisher.Mono;import java.util.HashMap;import java.util.Map;@Service@Qualifier("stripeService")public class StripeServiceImpl implements PaymentGatewayService {    @Value("${stripe.apiKey}")    private String stripeApiKey;    @PostConstruct    public void init() {        Stripe.apiKey = stripeApiKey;    }    @Override    public Mono<Map<String, Object>> processPayment(PaymentRequest request) {        try {            ChargeCreateParams params = ChargeCreateParams.builder()                    .setAmount((long) (request.getAmount() * 100)) // Cantidad en centavos                    .setCurrency(request.getCurrency())                    .setDescription(request.getDescription())                    .setSource(request.getToken())                    .build();            Charge charge = Charge.create(params);            Map<String, Object> response = new HashMap<>();            response.put("id", charge.getId());            response.put("status", charge.getStatus());            response.put("receipt_url", charge.getReceiptUrl());            return Mono.just(response);        } catch (StripeException e) {            return Mono.error(e);        }     }    }