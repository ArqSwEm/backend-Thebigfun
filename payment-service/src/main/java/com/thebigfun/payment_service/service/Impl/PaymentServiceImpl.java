package com.thebigfun.payment_service.service.Impl;import com.thebigfun.payment_service.model.Payment;import com.thebigfun.payment_service.repository.PaymentRepository;import com.thebigfun.payment_service.service.PaymentService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;@Servicepublic class PaymentServiceImpl implements PaymentService {    private final PaymentRepository paymentRepository;    @Autowired    public PaymentServiceImpl(PaymentRepository paymentRepository){        this.paymentRepository = paymentRepository;            }    @Override    public Payment createPayment(Payment payment) {        return paymentRepository.save(payment);    }    @Override    public List<Payment> getAllPayments() {        return paymentRepository.findAll();    }    @Override    public Payment getPaymentById(Long payment_id) {        return paymentRepository.findById(payment_id)                .orElseThrow(()->new RuntimeException("Payment not found"));    }    @Override    public Payment updatePayment(Long payment_id, Payment payment) {        Payment existingPayment = paymentRepository.findById(payment_id)                .orElseThrow(()->new RuntimeException("Payment not found"));        existingPayment.setAmount(payment.getAmount());        existingPayment.setCurrency(payment.getCurrency());        existingPayment.setStatus(payment.getStatus());        return paymentRepository.save(existingPayment);    }    @Override    public void deletePayment(Long payment_id) {        Payment  payment = paymentRepository.findById(payment_id)                .orElseThrow(() -> new RuntimeException("Payment not found with id " + payment_id));        payment.setIsActive(false);        payment.setDeletedAt(LocalDateTime.now());        paymentRepository.save(payment);    }    @Override    public boolean existsPaymentByPaymentId(Long payment_id) {        return paymentRepository.existsById(payment_id);    }}