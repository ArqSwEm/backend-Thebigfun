package com.thebigfun.payment_service.service;import com.thebigfun.payment_service.model.entity.Payment_Service;import com.thebigfun.payment_service.repository.Payment_ServiceRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;@Servicepublic class Payment_ServiceServiceImpl {    private final Payment_ServiceRepository paymentServiceRepository;    @Autowired    public Payment_ServiceServiceImpl(Payment_ServiceRepository payment_serviceRepository){        this.paymentServiceRepository =payment_serviceRepository;            }    // Leer - Obtener todos los Payment    public List<Payment_Service> fetchAll() {        return paymentServiceRepository.findAll();    }    // Leer - Obtener un Payment por ID    public Optional<Payment_Service> fetchById(Integer id) {        return  paymentServiceRepository.findById(id);    }    // Crear - Añadir un nuevo Payment    public Payment_Service create(Payment_Service payment_service){        return  paymentServiceRepository.save(payment_service);    }    // Actualizar - Actualizar un Payment existente    public Payment_Service update(Integer id, Payment_Service payment_service){        Payment_Service payment_service_update = paymentServiceRepository.findById(id)                .orElseThrow(()->new RuntimeException("Payment not found with id" + id));        payment_service_update.setAmount(payment_service.getAmount());        payment_service_update.setCurrency(payment_service.getCurrency());        payment_service_update.setStatus(payment_service.getStatus());        // Aquí se deberían copiar todos los campos que se pueden actualizar        // Omitiendo userId si no se debe cambiar después de la creación        return paymentServiceRepository.save(payment_service_update);    }    // Eliminar - Borrar un Payment    public void delete(Integer id) {        Payment_Service payment_service = paymentServiceRepository.findById(id)                .orElseThrow(()-> new RuntimeException("Payment not found wiht id" + id));        payment_service.setIsActive(false); // Marcar como inactivo        payment_service.setDeletedAt(LocalDateTime.now()); // Registrar la fecha de "eliminación"        paymentServiceRepository.save(payment_service);    }}