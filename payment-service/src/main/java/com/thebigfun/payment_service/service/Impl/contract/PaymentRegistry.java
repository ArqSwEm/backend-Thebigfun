package com.thebigfun.payment_service.service.Impl.contract;import org.web3j.abi.TypeReference;import org.web3j.abi.datatypes.*;import org.web3j.abi.datatypes.generated.Uint256;import org.web3j.crypto.Credentials;import org.web3j.protocol.Web3j;import org.web3j.protocol.core.RemoteCall;import org.web3j.protocol.core.methods.response.Log;import org.web3j.protocol.core.methods.response.TransactionReceipt;import org.web3j.tx.Contract;import org.web3j.tx.gas.ContractGasProvider;import java.math.BigInteger;import java.util.Arrays;import java.util.Collections;import java.util.List;public class PaymentRegistry extends Contract {    // Constructor protegido para inicializar la instancia del contrato con Web3j.    protected PaymentRegistry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider, String contractAbi) {        super(contractAbi, contractAddress, web3j, credentials, gasProvider);    }    // Método estático de fábrica para crear e inicializar una instancia del contrato.    public static PaymentRegistry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider, String contractAbi) {        return new PaymentRegistry(contractAddress, web3j, credentials, gasProvider, contractAbi);    }    public RemoteCall<TransactionReceipt> registerPayment(String paymentId, BigInteger amount, String currency) {        Function function = new Function(                "registerPayment",                Arrays.asList(new Utf8String(paymentId), new Uint256(amount), new Utf8String(currency)),                Collections.emptyList()        );        return executeRemoteCallTransaction(function);    }    // Definir el evento TransferCodeGenerated    public static final Event TRANSFER_CODE_GENERATED_EVENT = new Event("TransferCodeGenerated",            Arrays.<TypeReference<?>>asList(                    new TypeReference<Utf8String>() {}, // paymentId                    new TypeReference<Utf8String>() {}  // transferCode            )    );    // Método para generar código de transferencia    public RemoteCall<TransactionReceipt> generateTransferCode(String paymentId) {        Function function = new Function(                "generateTransferCode",                Collections.singletonList(new Utf8String(paymentId)),                Collections.emptyList()        );        return executeRemoteCallTransaction(function);    }    // Método para extraer el código de transferencia del recibo de la transacción    public static String extractTransferCode(TransactionReceipt transactionReceipt) {        // Verificar si el TransactionReceipt contiene logs        if (!transactionReceipt.getLogs().isEmpty()) {            // Iterar a través de cada log hasta encontrar el evento deseado            for (Log log : transactionReceipt.getLogs()) {                EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_CODE_GENERATED_EVENT, log);                if (eventValues != null) {                    Utf8String transferCode = (Utf8String) eventValues.getNonIndexedValues().get(1);  // Asumiendo que este es el índice correcto para el código de transferencia                    return transferCode.getValue();                }            }        }        return null;    }    public RemoteCall<TransactionReceipt> redeemTransferCode(String paymentId, String transferCode, String newOwnerAddress) {        Function function = new Function(                "redeemTransferCode",                Arrays.asList(new Utf8String(paymentId), new Utf8String(transferCode), new Address(newOwnerAddress)),                Collections.emptyList()        );        return executeRemoteCallTransaction(function);    }    // Definir el evento TransferCodeGenerated    public static final Event PAYMENT_TRANSFERRED_EVENT = new Event(            "PaymentTransferred",            Arrays.<TypeReference<?>>asList(                    new TypeReference<Utf8String>() {}, // paymentId                    new TypeReference<Address>() {},    // previousOwner                    new TypeReference<Address>() {},    // newOwner                    new TypeReference<Uint256>() {},    // timestamp                    new TypeReference<Utf8String>() {}  // transactionHash            )    );    public RemoteCall<List<Type>> getPayment(String paymentId) {        Function function = new Function(                "getPayment",                Collections.singletonList(new Utf8String(paymentId)),                Arrays.asList(                        new TypeReference<Utf8String>() {},                        new TypeReference<Uint256>() {},                        new TypeReference<Utf8String>() {},                        new TypeReference<Uint256>() {},                        new TypeReference<Type>() {},                        new TypeReference<Utf8String>() {}                )        );        return executeRemoteCallMultipleValueReturn(function);    }    public RemoteCall<String> getTransactionHash(String paymentId) {        Function function = new Function(                "getTransactionHash",                Collections.singletonList(new Utf8String(paymentId)),                Collections.singletonList(new TypeReference<Utf8String>() {})        );        return executeRemoteCallSingleValueReturn(function, String.class);    }    public RemoteCall<List<Type>> getAllPayments() {        Function function = new Function(                "getAllPayments",                Collections.emptyList(),                Collections.singletonList(new TypeReference<DynamicArray<Type>>() {})        );        return executeRemoteCallMultipleValueReturn(function);    }}