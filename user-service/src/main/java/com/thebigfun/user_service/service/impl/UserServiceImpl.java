package com.thebigfun.user_service.service.impl;import com.thebigfun.user_service.dto.EventAndUserDTO;import com.thebigfun.user_service.dto.EventDTO;import com.thebigfun.user_service.dto.UserDTO;import com.thebigfun.user_service.model.User;import com.thebigfun.user_service.repository.UserRepository;import com.thebigfun.user_service.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.web.reactive.function.client.WebClient;import reactor.core.publisher.Mono;import java.util.List;@Servicepublic class UserServiceImpl implements UserService {    private UserRepository userRepository;    private final WebClient.Builder webClientBuilder;    @Value("${api.gateway.base.url}")    private String apiGatewayBaseUrl;    @Autowired    public UserServiceImpl(UserRepository userRepository, WebClient.Builder webClientBuilder) {        this.userRepository = userRepository;        this.webClientBuilder = webClientBuilder;    }    @Override    public User createUser(User user) {        return userRepository.save(user);    }    @Override    public User getUserById(Long user_id) {        return userRepository.findById(user_id).orElse(null);    }    @Override    public User updateUser(User user) {        return userRepository.save(user);    }    @Override    public void deleteUser(Long user_id) {        userRepository.deleteById(user_id);    }    @Override    public List<User> getAllUsers() {        return userRepository.findAll();    }    public boolean existsUserByUserId(Long userId) {        return userRepository.existsById(userId);    }    // Método para obtener eventos organizados por el usuario    public Mono<List<EventDTO>> getEventsByOrganizerId(Long organizerId) {        return webClientBuilder.build()                .get()                .uri(apiGatewayBaseUrl + "/api/event_services/events/byOrganizer/" + organizerId)                .retrieve()                .bodyToFlux(EventDTO.class)                .collectList();    }    public Mono<UserDTO> getUserById(Integer userId) {        return webClientBuilder.build()                .get()                .uri(apiGatewayBaseUrl + "/api/user_services/" + userId)                .retrieve()                .bodyToMono(UserDTO.class);    }    // Método para obtener la combinación de detalles de evento y usuario    public Mono<EventAndUserDTO> getEventAndUserDetails(Integer eventId) {        return getEventById(eventId).flatMap(eventDTO -> {            Integer organizerId = eventDTO.getOrganizerId();            return getUserById(organizerId)                    .map(userDTO -> new EventAndUserDTO(eventDTO, userDTO));        });    }}