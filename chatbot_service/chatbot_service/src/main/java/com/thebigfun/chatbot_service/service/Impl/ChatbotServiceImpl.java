package com.thebigfun.chatbot_service.service.Impl;import com.thebigfun.chatbot_service.model.Chatbot;import com.thebigfun.chatbot_service.repository.ChatbotRepository;import com.thebigfun.chatbot_service.service.ChatbotService;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.*;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import java.sql.Array;import java.time.LocalDateTime;@Servicepublic class ChatbotServiceImpl implements ChatbotService {    private final ChatbotRepository chatbotRepository;    @Autowired    public ChatbotServiceImpl(ChatbotRepository chatbotRepository) {        this.chatbotRepository = chatbotRepository;    }    @Override    public String createChatAndReturnResponse(String message) {        try {            LocalDateTime currentTime = LocalDateTime.now();            Chatbot chatbot = new Chatbot();            JSONObject jsonObject = new JSONObject(message);            // Obtener el valor del campo "message"            String messageContent = jsonObject.getString("message");            chatbot.setMessage(messageContent);            chatbot.setTime(currentTime);            chatbotRepository.save(chatbot);            String rasaUrl = "http://localhost:5005/webhooks/rest/webhook";            RestTemplate restTemplate = new RestTemplate();            HttpHeaders headers = new HttpHeaders();            headers.setContentType(MediaType.APPLICATION_JSON);            // Construir el JSON para enviar a Rasa            JSONObject json = new JSONObject();            json.put("sender", "user");            json.put("message", messageContent);            HttpEntity<String> request = new HttpEntity<>(json.toString(), headers);            System.out.println("Request to Rasa: " + json);            ResponseEntity<String> response = restTemplate.exchange(rasaUrl, HttpMethod.POST, request, String.class);            String responseBody = response.getBody();            System.out.println("Response from Rasa: " + responseBody);            if (responseBody == null || responseBody.isEmpty()) {                System.out.println("Response body is empty.");                return "Error: Response body is empty";            }            JSONArray jsonArray = new JSONArray(responseBody);            if (jsonArray.length() == 0) {                System.out.println("Response array is empty.");                return "Error: Response array is empty";            }            JSONObject rasaResponse = jsonArray.getJSONObject(0);            // Verificar si la respuesta es una bienvenida o informaci√≥n de evento            if (rasaResponse.has("text")) {                String chatbotResponse = rasaResponse.getString("text");                chatbot.setRasaResponse(chatbotResponse);                chatbotRepository.save(chatbot);                return chatbotResponse;            } else {                return "Error: Unexpected response format from Rasa";            }        } catch (JSONException e) {            e.printStackTrace();            return "Error: JSON Exception";        } catch (Exception e) {            e.printStackTrace();            return "Error: Exception";        }    }}