package com.thebigfun.booking_service.service.impl;import com.thebigfun.booking_service.model.entity.Booking;import com.thebigfun.booking_service.repository.Booking_ServiceRepository;import com.thebigfun.booking_service.service.Booking_Service;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class BookingServiceImpl implements Booking_Service {    private final Booking_ServiceRepository booking_serviceRepository;    @Autowired    public BookingServiceImpl(Booking_ServiceRepository bookingServiceRepository){        this.booking_serviceRepository = bookingServiceRepository;    }    @Override    @Transactional    public Booking createBooking(Booking booking) {        return  booking_serviceRepository.save(booking);    }    @Override    @Transactional    public List<Booking> getAllBookings() {        return booking_serviceRepository.findAll();    }    @Override    @Transactional(readOnly = true)    public Booking getBookingById(Long booking_id) {        return booking_serviceRepository.findById(booking_id).orElseThrow(()->new RuntimeException("Booking not found"));    }    @Override    @Transactional    public Booking updateBooking(Long booking_id, Booking booking) {        Booking existingBooking= booking_serviceRepository.findById(booking_id)                .orElseThrow(()-> new RuntimeException("Booking not found"));        existingBooking.setNumberOfTickets(booking.getNumberOfTickets());        existingBooking.setTotalPrice(booking.getTotalPrice());        existingBooking.setReservationDate(booking.getReservationDate());        existingBooking.setNotes(booking.getNotes());        existingBooking.setStatus(booking.getStatus());        existingBooking.setPaymentStatus(booking.getPaymentStatus());        return booking_serviceRepository.save(existingBooking);    }    @Override    @Transactional    public void deleteBooking(Long booking_id) {        // bueno primero verifico si la reserva existe para proporcionar una respuesta más específica en caso de que no exista.        if (!booking_serviceRepository.existsById(booking_id)) {            throw new IllegalArgumentException("Booking not found with ID: " + booking_id);        }        booking_serviceRepository.deleteById(booking_id);    }    @Override    @Transactional    public boolean existsBookingByBookingId(Long booking_id) {        return booking_serviceRepository.existsById(booking_id);    }/*por implementar    @Transactional    public Booking updateBooking(Long bookingId, Long newEventId) {        Booking booking = booking_serviceRepository.findById(bookingId)                .orElseThrow(() -> new IllegalArgumentException("Booking not found"));        if (eventClient.existsById(newEventId)) {            booking.setEventId(newEventId);  // Actualiza solo si el nuevo evento es válido        } else {            throw new IllegalArgumentException("Invalid event ID");        }        return booking_serviceRepository.save(booking);    }    */}