package com.thebigfun.booking_service.service.impl;import com.thebigfun.booking_service.model.entity.Booking;import com.thebigfun.booking_service.repository.Booking_ServiceRepository;import com.thebigfun.booking_service.service.Booking_Service;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.time.LocalDateTime;import java.util.List;@Servicepublic class BookingServiceImpl implements Booking_Service {    private static final Logger log = LoggerFactory.getLogger(BookingServiceImpl.class);    private final Booking_ServiceRepository booking_serviceRepository;    @Autowired    public BookingServiceImpl(Booking_ServiceRepository bookingServiceRepository){        this.booking_serviceRepository = bookingServiceRepository;    }    @Override    @Transactional    public Booking createBooking(Booking booking) {        // Configura la fecha de expiración (ejemplo: 24 horas después de la creación)        //booking.setExpirationDate(LocalDateTime.now().plusHours(24));        booking.setReservationDate(LocalDateTime.now());        booking.setExpirationDate(LocalDateTime.now().plusMinutes(1));        booking.setPaymentStatus(Booking.PaymentStatus.AWAITING_PAYMENT);        booking.setStatus(Booking.BookingStatus.PENDING);        return booking_serviceRepository.save(booking);    }    @Override    @Transactional    public List<Booking> getAllBookings() {        return booking_serviceRepository.findAll();    }    @Override    @Transactional(readOnly = true)    public Booking getBookingById(Long booking_id) {        return booking_serviceRepository.findById(booking_id).orElseThrow(()->new RuntimeException("Booking not found"));    }    @Override    @Transactional    public Booking updateBooking(Long booking_id, Booking bookingDetails) {        Booking existingBooking= booking_serviceRepository.findById(booking_id)                .orElseThrow(()-> new RuntimeException("Booking not found"));        existingBooking.setNumberOfTickets(bookingDetails.getNumberOfTickets());        existingBooking.setTotalPrice(bookingDetails.getTotalPrice());        existingBooking.setReservationDate(bookingDetails.getReservationDate());        existingBooking.setNotes(bookingDetails.getNotes());        existingBooking.setStatus(bookingDetails.getStatus());        existingBooking.setPaymentStatus(bookingDetails.getPaymentStatus());        return booking_serviceRepository.save(existingBooking);    }    @Override    @Transactional    public void deleteBooking(Long bookingId) {        Booking booking = booking_serviceRepository.findById(bookingId)                .orElseThrow(() -> new RuntimeException("Booking not found"));        // Comprobar si la reserva ya está cancelada o expirada para evitar trabajo innecesario        if (booking.getStatus() == Booking.BookingStatus.CANCELLED || booking.getStatus() == Booking.BookingStatus.EXPIRED) {            throw new IllegalStateException("Booking is already cancelled or expired.");        }        booking.setStatus(Booking.BookingStatus.CANCELLED);        booking_serviceRepository.save(booking);        // Opcional: Añadir lógica para reembolsos si el sistema lo requiere    }    @Override    @Transactional    public boolean existsBookingByBookingId(Long booking_id) {        return booking_serviceRepository.existsById(booking_id);    }    @Override    @Transactional    public void updatePaymentStatus(Long bookingId, Booking.PaymentStatus paymentStatus) {        Booking booking = booking_serviceRepository.findById(bookingId)                .orElseThrow(() -> new RuntimeException("Booking not found"));        booking.setPaymentStatus(paymentStatus);        if (paymentStatus == Booking.PaymentStatus.PAID) {            booking.setStatus(Booking.BookingStatus.CONFIRMED);        } else if (paymentStatus == Booking.PaymentStatus.REFUNDED) {            booking.setStatus(Booking.BookingStatus.CANCELLED);        } else if (paymentStatus == Booking.PaymentStatus.AWAITING_PAYMENT) {            if (LocalDateTime.now().isBefore(booking.getExpirationDate())) {                booking.setStatus(Booking.BookingStatus.PENDING);            } else {                if (booking.getPaymentStatus() != Booking.PaymentStatus.PAID) { // Verificar que no esté pagado antes de establecer como EXPIRED                booking.setStatus(Booking.BookingStatus.EXPIRED);                booking.setPaymentStatus(Booking.PaymentStatus.REFUNDED);  // Suponiendo que la cancelación implica reembolso            }            }        }        booking_serviceRepository.save(booking);    }        @Scheduled(fixedRate = 60000)        @Transactional        public void checkAndReleaseExpiredBookings() {            List<Booking> expiredBookings = booking_serviceRepository.findAllByStatusAndExpirationDateBefore(                    Booking.BookingStatus.PENDING, LocalDateTime.now());            for (Booking booking : expiredBookings) {                // Solo actualiza como expirado si el pago todavía está pendiente.                if (booking.getPaymentStatus().equals(Booking.PaymentStatus.AWAITING_PAYMENT)) {                    booking.setStatus(Booking.BookingStatus.EXPIRED);                    // Puedes optar por no actualizar el estado de pago a reembolsado,                    // o manejarlo de acuerdo a la lógica de tu negocio.                    // booking.setPaymentStatus(Booking.PaymentStatus.REFUNDED);                } else if (booking.getPaymentStatus().equals(Booking.PaymentStatus.PAID)) {                    // Si la reserva ya está pagada, se confirma la reserva.                    booking.setStatus(Booking.BookingStatus.CONFIRMED);                }                booking_serviceRepository.save(booking);            }        }    @Transactional    public void cancelBooking(Long bookingId) {        Booking booking = booking_serviceRepository.findById(bookingId)                .orElseThrow(() -> new RuntimeException("Booking not found"));        // Verificar si la reserva ya está cancelada o expirada para evitar trabajo innecesario.        if (booking.getStatus() == Booking.BookingStatus.CANCELLED || booking.getStatus() == Booking.BookingStatus.EXPIRED) {            log.info("Intento de cancelar una reserva que ya está cancelada o expirada. ID: {}", bookingId);            throw new IllegalStateException("Booking is already cancelled or expired.");        }        booking.setStatus(Booking.BookingStatus.CANCELLED);        // Actualizar el estado del pago a reembolsado solo si aún está pendiente o no ha sido pagado.        if (booking.getPaymentStatus() == Booking.PaymentStatus.AWAITING_PAYMENT || booking.getPaymentStatus() == Booking.PaymentStatus.PAID) {            booking.setPaymentStatus(Booking.PaymentStatus.REFUNDED);            log.info("El estado del pago para la reserva ID: {} ha sido actualizado a REEMBOLSADO debido a la cancelación.", bookingId);        }        booking_serviceRepository.save(booking);        log.info("Reserva cancelada con éxito. ID: {}", bookingId);    }    }