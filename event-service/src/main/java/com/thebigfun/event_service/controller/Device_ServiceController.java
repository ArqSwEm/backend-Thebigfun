package com.thebigfun.event_service.controller;import com.betabyte.device_service.model.entity.Device_Service;import com.betabyte.device_service.service.Device_ServiceServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/device_services")//@AllArgsConstructorpublic class Device_ServiceController {    private  final Device_ServiceServiceImpl device_serviceService;    @Autowired    public Device_ServiceController(Device_ServiceServiceImpl deviceServiceService) {        device_serviceService = deviceServiceService;    }    // Crear un nuevo dispositivo    @PostMapping    public Device_Service createDevice(@RequestBody Device_Service device_service){        return device_serviceService.create(device_service) ;    }    // Obtener todos los dispositivos    @GetMapping    public List<Device_Service> getAllDevices(){        return  device_serviceService.fetchAll();    }    // Obtener un dispositivo por ID    @GetMapping("/{id}")    public ResponseEntity<Device_Service> getDiviceById(@PathVariable Integer id){        return device_serviceService.fetchById(id)                .map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());    } //Actualizar un dispotivo existente    @PutMapping("/{id}")    public ResponseEntity<Device_Service> updateDivice(@PathVariable Integer id, @RequestBody Device_Service device_service ){        try {            Device_Service updatedDevice = device_serviceService.update(id,device_service);            return ResponseEntity.ok(updatedDevice);        }catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }    // Eliminar un dispositivo    @DeleteMapping("/{id}")    public ResponseEntity<?> deleteDevice(@PathVariable Integer id) {        try {            device_serviceService.delete(id);            return ResponseEntity.ok().build();        } catch (RuntimeException e) {            return ResponseEntity.notFound().build();        }    }}