package com.thebigfun.event_service.controller;import com.thebigfun.event_service.model.entity.Event_Service;import com.thebigfun.event_service.service.Event_ServiceServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/event_services")//@AllArgsConstructorpublic class Event_ServiceController {private final Event_ServiceServiceImpl event_serviceService;@Autowiredpublic Event_ServiceController(Event_ServiceServiceImpl eventServiceService){    event_serviceService = eventServiceService;}    // Crear un nuevo evento    @PostMapping    public ResponseEntity<Event_Service> createEvent(@RequestBody Event_Service event_service){    Event_Service createdEvent = event_serviceService.create(event_service);    return new ResponseEntity<>(createdEvent, HttpStatus.CREATED);    }    // Obtener todos los eventos    @GetMapping    public ResponseEntity<List<Event_Service>>getAllEvents(){    List<Event_Service> eventServices = event_serviceService.fetchAll();    return new ResponseEntity<>(eventServices, HttpStatus.OK);    }    // Obtener un evento espec√≠fico por ID    @GetMapping("/{id}")    public ResponseEntity<Event_Service> getEventById(@PathVariable Integer id) {        Optional<Event_Service> event = event_serviceService.fetchById(id);        return event.map(value -> new ResponseEntity<>(value, HttpStatus.OK))                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));    }    // Actualizar un evento existente    @PutMapping("/{id}")    public ResponseEntity<Event_Service> updateEvent(@PathVariable Integer id, @RequestBody Event_Service event) {        try {            Event_Service updatedEvent = event_serviceService.update(id, event);            return new ResponseEntity<>(updatedEvent, HttpStatus.OK);        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }    // Eliminar un evento    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteEvent(@PathVariable Integer id) {        try {            event_serviceService.delete(id);            return ResponseEntity.noContent().build();        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }}