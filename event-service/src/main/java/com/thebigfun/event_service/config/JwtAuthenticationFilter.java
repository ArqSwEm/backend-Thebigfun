/*package com.thebigfun.event_service.config;import jakarta.servlet.FilterChain;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;import org.springframework.stereotype.Component;import org.springframework.web.filter.OncePerRequestFilter;@Component@RequiredArgsConstructorpublic class JwtAuthenticationFilter extends OncePerRequestFilter {    @Autowired    private JwtTokenProvider tokenProvider;    @Override    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) {        try {            String jwt = getJwtFromRequest(request);            if (jwt != null && tokenProvider.validateToken(jwt)) {                String username = tokenProvider.getUsernameFromJWT(jwt);                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(username, null, null);                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));                SecurityContextHolder.getContext().setAuthentication(authentication);            }        } catch (Exception e) {            logger.error("Cannot set user authentication in security context", e);        }        filterChain.doFilter(request, response);    }    private String getJwtFromRequest(HttpServletRequest request) {        String bearerToken = request.getHeader("Authorization");        if (bearerToken != null && bearerToken.startsWith("Bearer ")) {            return bearerToken.substring(7);        }        return null;    }}*/