package com.thebigfun.event_service.service;import com.betabyte.device_service.model.entity.Device_Service;import com.betabyte.device_service.repository.Device_ServiceRepository;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class Event_ServiceServiceImpl {    private  final Device_ServiceRepository device_serviceRepository;    public Event_ServiceServiceImpl(Device_ServiceRepository deviceServiceRepository) {        device_serviceRepository = deviceServiceRepository;    }    // Leer - Obtener todos los registros    public List<Device_Service> fetchAll() {        return device_serviceRepository.findAll();    }    // Leer - Obtener un registro por ID    public Optional<Device_Service> fetchById(Integer id) {        return device_serviceRepository.findById(id);    }    // Crear - Añadir un nuevo registro    public Device_Service create(Device_Service device_service) {        return device_serviceRepository.save(device_service);    }    // Actualizar - Actualizar un registro existente    public Device_Service update(Integer id, Device_Service device_service) {        Device_Service deviceServiceupdate = device_serviceRepository.findById(id)                .orElseThrow(() -> new RuntimeException("Device not found with id " + id));        deviceServiceupdate.setName(device_service.getName());        deviceServiceupdate.setBrand(device_service.getBrand());        deviceServiceupdate.setSeries(device_service.getSeries());        deviceServiceupdate.setType(device_service.getType());        deviceServiceupdate.setModel(device_service.getModel());        // Aquí se deberían copiar todos los campos que se pueden actualizar        // Omitiendo userId si no se debe cambiar después de la creación        return device_serviceRepository.save(device_service);    }    // Eliminar - Borrar un registro    public void delete(Integer id) {        Device_Service device_service = device_serviceRepository.findById(id)                .orElseThrow(() -> new RuntimeException("Device not found with id " + id));        device_serviceRepository.delete(device_service);    }}