package com.thebigfun.ticket_service.controller;import com.thebigfun.ticket_service.model.Ticket;import com.thebigfun.ticket_service.service.Impl.TicketServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/api/ticket_services")public class TicketController {    private  final TicketServiceImpl ticketServiceImpl;    @Autowiredpublic TicketController(TicketServiceImpl ticket_service){        ticketServiceImpl = ticket_service;}    @PostMapping    public ResponseEntity<Ticket> createTicket(@RequestBody Ticket ticket){        Ticket createdTicket = ticketServiceImpl.createTicket(ticket);    return new ResponseEntity<>(createdTicket, HttpStatus.CREATED);    }    @GetMapping    public ResponseEntity<List<Ticket>>getAllTickets(){    List<Ticket> ticketList = ticketServiceImpl.getAllTickets();    return new ResponseEntity<>(ticketList, HttpStatus.OK);    }    @GetMapping("/{id}")    public ResponseEntity<Ticket> getTicketById(@PathVariable Long id) {        try {            Ticket ticket = ticketServiceImpl.getTicketById(id);            return ResponseEntity.ok(ticket);        } catch (RuntimeException ex){            return ResponseEntity.notFound().build();        }    }    @PutMapping("/{id}")    public ResponseEntity<Ticket> updateTicket(@PathVariable Long id, @RequestBody Ticket ticket) {        try {            Ticket updatedTicket = ticketServiceImpl.updateTicket(id, ticket);            return new ResponseEntity<>(updatedTicket, HttpStatus.OK);        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTicket(@PathVariable Long id) {        try {            ticketServiceImpl.deleteTicket(id);            return ResponseEntity.noContent().build();        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }}