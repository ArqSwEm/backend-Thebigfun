package com.thebigfun.ticket_service.controller;import com.thebigfun.ticket_service.model.entity.Ticket_Service;import com.thebigfun.ticket_service.service.Ticket_ServiceServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/api/ticket_services")//@AllArgsConstructorpublic class Ticket_ServiceController {    private  final Ticket_ServiceServiceImpl ticketServiceServiceImpl;    @Autowiredpublic Ticket_ServiceController(Ticket_ServiceServiceImpl ticket_serviceService){        ticketServiceServiceImpl = ticket_serviceService;}    // Crear un nuevo ticket    @PostMapping    public ResponseEntity<Ticket_Service> createTicket(@RequestBody Ticket_Service ticket_service){        Ticket_Service createdTicket = ticketServiceServiceImpl.create(ticket_service);    return new ResponseEntity<>(createdTicket, HttpStatus.CREATED);    }    // Obtener todos los ticket    @GetMapping    public ResponseEntity<List<Ticket_Service>>getAllTickets(){    List<Ticket_Service> ticketServices = ticketServiceServiceImpl.fetchAll();    return new ResponseEntity<>(ticketServices, HttpStatus.OK);    }    // Obtener un ticket espec√≠fico por ID    @GetMapping("/{id}")    public ResponseEntity<Ticket_Service> getEventById(@PathVariable Integer id) {        Optional<Ticket_Service> event = ticketServiceServiceImpl.fetchById(id);        return event.map(value -> new ResponseEntity<>(value, HttpStatus.OK))                .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));    }    // Actualizar un ticket existente    @PutMapping("/{id}")    public ResponseEntity<Ticket_Service> updateEvent(@PathVariable Integer id, @RequestBody Ticket_Service ticket) {        try {            Ticket_Service updatedticket = ticketServiceServiceImpl.update(id, ticket);            return new ResponseEntity<>(updatedticket, HttpStatus.OK);        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }    // Eliminar un ticket    @DeleteMapping("/{id}")    public ResponseEntity<Void> deleteTicket(@PathVariable Integer id) {        try {            ticketServiceServiceImpl.delete(id);            return new ResponseEntity<>(HttpStatus.NO_CONTENT);        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }}