package com.thebigfun.ticket_service.service;import com.thebigfun.ticket_service.model.entity.Ticket_Service;import com.thebigfun.ticket_service.repository.Ticket_ServiceRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.List;import java.util.Optional;@Servicepublic class Ticket_ServiceServiceImpl {    private final Ticket_ServiceRepository ticket_serviceRepository;    @Autowired    public Ticket_ServiceServiceImpl(Ticket_ServiceRepository ticket_serviceRepository) {        this.ticket_serviceRepository = ticket_serviceRepository;    }    // Leer - Obtener todos los registros    public List<Ticket_Service> fetchAll() {        return ticket_serviceRepository.findAll();    }    // Leer - Obtener un registro por ID    public Optional<Ticket_Service> fetchById(Integer id) {        return  ticket_serviceRepository.findById(id);    }    // Crear - Añadir un nuevo registro    public Ticket_Service create(Ticket_Service ticket_service){        return  ticket_serviceRepository.save(ticket_service);    }    // Actualizar - Actualizar un registro existente    public Ticket_Service update(Integer id, Ticket_Service ticket_service){        Ticket_Service ticket_service_update = ticket_serviceRepository.findById(id)                .orElseThrow(()->new RuntimeException("Ticket not found with id" + id));        ticket_service_update.setCategory(ticket_service.getCategory());        ticket_service_update.setPrice(ticket_service.getPrice());        ticket_service_update.setStatus(ticket_service.getStatus());        ticket_service_update.setQrCode(ticket_service.getQrCode());        // Aquí se deberían copiar todos los campos que se pueden actualizar        // Omitiendo userId si no se debe cambiar después de la creación        return ticket_serviceRepository.save(ticket_service_update);    }    // Eliminar - Borrar un registro    public void delete(Integer id) {        Ticket_Service ticket_service = ticket_serviceRepository.findById(id)                .orElseThrow(()-> new RuntimeException("Ticket not found wiht id" + id));        ticket_service.setIsActive(false); // Marcar como inactivo        ticket_service.setDeletedAt(LocalDateTime.now()); // Registrar la fecha de "eliminación"        ticket_serviceRepository.save(ticket_service);    }}