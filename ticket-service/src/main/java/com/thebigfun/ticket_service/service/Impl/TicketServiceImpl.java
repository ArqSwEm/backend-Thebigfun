package com.thebigfun.ticket_service.service.Impl;import com.thebigfun.ticket_service.model.Ticket;import com.thebigfun.ticket_service.repository.TicketRepository;import com.thebigfun.ticket_service.service.TicketService;import com.thebigfun.ticket_service.util.CodeGenerator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.reactive.function.client.WebClient;import reactor.core.publisher.Mono;import java.util.Arrays;import java.util.List;import java.util.NoSuchElementException;@Servicepublic class TicketServiceImpl implements TicketService {    private final TicketRepository ticket_Repository;    private final WebClient.Builder webClientBuilder;    @Value("${api.gateway.base.url}")    private String apiGatewayBaseUrl;    @Autowired    public TicketServiceImpl(TicketRepository ticket_Repository,   WebClient.Builder webClientBuilder) {        this.ticket_Repository = ticket_Repository;        this.webClientBuilder = webClientBuilder;    }    private boolean isValidCategory(String category) {        return Arrays.asList("VIP", "GENERAL").contains(category.toUpperCase());    }    @Override    @Transactional    public Ticket createTicket(Ticket ticket) {        if (!isValidCategory(ticket.getCategory())) {            throw new IllegalArgumentException("Invalid ticket category: " + ticket.getCategory());        }        return ticket_Repository.save(ticket);    }    @Override    @Transactional    public List<Ticket> getAllTickets() {        return ticket_Repository.findAll();    }    @Override    @Transactional(readOnly = true)    public Ticket getTicketById(Long ticket_id) {        return ticket_Repository.findById(ticket_id)                .orElseThrow(() -> new RuntimeException("Ticket not found"));    }    @Override    @Transactional    public Ticket updateTicket(Long ticket_id, Ticket ticketDetails) {        if (!isValidCategory(ticketDetails.getCategory())) {            throw new IllegalArgumentException("Invalid ticket category: " + ticketDetails.getCategory());        }        Ticket existingTicket = ticket_Repository.findById(ticket_id)                .orElseThrow(() -> new RuntimeException("Ticket not found"));        existingTicket.setCategory(ticketDetails.getCategory());        existingTicket.setPrice(ticketDetails.getPrice());        existingTicket.setStatus(ticketDetails.getStatus());        existingTicket.setQrCode(ticketDetails.getQrCode());        return ticket_Repository.save(existingTicket);    }    @Override    @Transactional    public void deleteTicket(Long ticket_id) {        if(!ticket_Repository.existsById(ticket_id)){            throw  new IllegalArgumentException("Ticket not found ID: "+ ticket_id);        }        ticket_Repository.deleteById(ticket_id);    }    @Override    public boolean existsTicketByTicketId(Long ticket_id) {        return ticket_Repository.existsById(ticket_id);    }    @Override    public Double calculateTotalPriceForActiveTickets(Long userId) {        List<Ticket> activeTickets = ticket_Repository.findByUserIdAndIsActive(userId, true);        if (activeTickets.isEmpty()) {            throw new NoSuchElementException("No active tickets found for user with ID " + userId);        }        return activeTickets.stream()                .mapToDouble(Ticket::getPrice)                .sum();    }    @Override    public String generateTransferCode(Long ticketId) {        return null;    }    /*    // Método para generar código de transferencia    public String generateTransferCode(Long ticketId) {        Ticket ticket = getTicketById(ticketId);        String paymentId = ticket.getPaymentId(); // Asegúrate de tener el campo paymentId en tu entidad Ticket        // Llamar a la API de payment-service para generar el código de transferencia        String transferCode = webClientBuilder.build()                .post()                .uri(apiGatewayBaseUrl + "/api/payments_services/blockchain/generateTransferCode?paymentId=" + paymentId)                .retrieve()                .bodyToMono(String.class)                .block();        // Convertir el código de transferencia a un código corto y devolverlo        return CodeGenerator.generateShortCode();    }*/}