package com.thebigfun.ticket_service.service.Impl;import com.thebigfun.ticket_service.model.Ticket;import com.thebigfun.ticket_service.repository.TicketRepository;import com.thebigfun.ticket_service.service.TicketService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;@Servicepublic class TicketServiceImpl implements TicketService {    private final TicketRepository ticket_Repository;    @Autowired    public TicketServiceImpl(TicketRepository ticket_Repository) {        this.ticket_Repository = ticket_Repository;    }    @Override    @Transactional    public Ticket createTicket(Ticket ticket) {        return ticket_Repository.save(ticket);    }    @Override    @Transactional    public List<Ticket> getAllTickets() {        return ticket_Repository.findAll();    }    @Override    @Transactional(readOnly = true)    public Ticket getTicketById(Long ticket_id) {        return ticket_Repository.findById(ticket_id)                .orElseThrow(() -> new RuntimeException("Ticket not found"));    }    @Override    @Transactional    public Ticket updateTicket(Long ticket_id, Ticket ticketDetails) {        Ticket existingTicket = ticket_Repository.findById(ticket_id)                .orElseThrow(() -> new RuntimeException("Ticket not found"));        existingTicket.setCategory(ticketDetails.getCategory());        existingTicket.setPrice(ticketDetails.getPrice());        existingTicket.setStatus(ticketDetails.getStatus());        existingTicket.setQrCode(ticketDetails.getQrCode());        return ticket_Repository.save(existingTicket);    }    @Override    @Transactional    public void deleteTicket(Long ticket_id) {        if(!ticket_Repository.existsById(ticket_id)){            throw  new IllegalArgumentException("Ticket not found ID: "+ ticket_id);        }        ticket_Repository.deleteById(ticket_id);    }    @Override    public boolean existsTicketByTicketId(Long ticket_id) {        return ticket_Repository.existsById(ticket_id);    }}